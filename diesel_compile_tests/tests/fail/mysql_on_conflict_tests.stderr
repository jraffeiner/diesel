error[E0277]: `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<columns::name>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>` is no valid SQL fragment for the `Mysql` backend
  --> tests/fail/mysql_on_conflict_tests.rs:43:18
   |
43 |         .execute(&mut connection);
   |          ------- ^^^^^^^^^^^^^^^ unsatisfied trait bound
   |          |
   |          required by a bound introduced by this call
   |
   = help: the trait `QueryFragment<Mysql, mysql::backend::MysqlOnConflictClause>` is not implemented for `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<columns::name>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>`
   = note: this usually means that the `Mysql` database system does not support
           this SQL syntax
   = help: the following other types implement trait `QueryFragment<DB, SP>`:
             `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action, diesel::query_builder::where_clause::WhereClause<Expr>>` implements `QueryFragment<DB>`
             `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<DB, SD>`
             `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<DB>`
             `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<Mysql, mysql::backend::MysqlOnConflictClause>`
   = note: required for `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<columns::name>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>` to implement `QueryFragment<Mysql>`
   = note: 1 redundant requirement hidden
   = note: required for `InsertStatement<users::table, diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<columns::name>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>>` to implement `QueryFragment<Mysql>`
   = note: required for `InsertStatement<users::table, diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<columns::name>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>>` to implement `ExecuteDsl<diesel::MysqlConnection, Mysql>`
note: required by a bound in `diesel::RunQueryDsl::execute`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn execute(self, conn: &mut Conn) -> QueryResult<usize>
   |        ------- required by a bound in this associated function
...
   |         Self: methods::ExecuteDsl<Conn>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::execute`

error[E0277]: `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(columns::id, columns::name)>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>` is no valid SQL fragment for the `Mysql` backend
  --> tests/fail/mysql_on_conflict_tests.rs:49:18
   |
49 |         .execute(&mut connection);
   |          ------- ^^^^^^^^^^^^^^^ unsatisfied trait bound
   |          |
   |          required by a bound introduced by this call
   |
   = help: the trait `QueryFragment<Mysql, mysql::backend::MysqlOnConflictClause>` is not implemented for `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(columns::id, columns::name)>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>`
   = note: this usually means that the `Mysql` database system does not support
           this SQL syntax
   = help: the following other types implement trait `QueryFragment<DB, SP>`:
             `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action, diesel::query_builder::where_clause::WhereClause<Expr>>` implements `QueryFragment<DB>`
             `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<DB, SD>`
             `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<DB>`
             `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<Mysql, mysql::backend::MysqlOnConflictClause>`
   = note: required for `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(columns::id, columns::name)>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>` to implement `QueryFragment<Mysql>`
   = note: 1 redundant requirement hidden
   = note: required for `InsertStatement<users::table, diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(columns::id, columns::name)>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>>` to implement `QueryFragment<Mysql>`
   = note: required for `InsertStatement<users::table, diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(columns::id, columns::name)>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>>` to implement `ExecuteDsl<diesel::MysqlConnection, Mysql>`
note: required by a bound in `diesel::RunQueryDsl::execute`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn execute(self, conn: &mut Conn) -> QueryResult<usize>
   |        ------- required by a bound in this associated function
...
   |         Self: methods::ExecuteDsl<Conn>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::execute`

error[E0277]: the trait bound `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(DuplicatedKeys, columns::name)>: diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<users::table>` is not satisfied
  --> tests/fail/mysql_on_conflict_tests.rs:53:22
   |
53 |         .on_conflict((dsl::DuplicatedKeys, name))
   |          ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ unsatisfied trait bound
   |          |
   |          required by a bound introduced by this call
   |
   = help: the trait `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<users::table>` is not implemented for `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(DuplicatedKeys, columns::name)>`
   = help: the following other types implement trait `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<Table>`:
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(T,)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<T as Column>::Table>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4, T5)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4, T5, T6)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
           and $N others
note: required by a bound in `diesel::upsert::on_conflict_extension::<impl InsertStatement<T, U, Op, Ret>>::on_conflict`
  --> $DIESEL/src/upsert/on_conflict_extension.rs
   |
   |     pub fn on_conflict<Target>(
   |            ----------- required by a bound in this associated function
...
   |         ConflictTarget<Target>: OnConflictTarget<T>,
   |                                 ^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::upsert::on_conflict_extension::<impl InsertStatement<T, U, Op, Ret>>::on_conflict`

error[E0277]: `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(DuplicatedKeys, columns::name)>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>` is no valid SQL fragment for the `Mysql` backend
  --> tests/fail/mysql_on_conflict_tests.rs:55:18
   |
55 |         .execute(&mut connection);
   |          ------- ^^^^^^^^^^^^^^^ unsatisfied trait bound
   |          |
   |          required by a bound introduced by this call
   |
   = help: the trait `QueryFragment<Mysql, mysql::backend::MysqlOnConflictClause>` is not implemented for `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(DuplicatedKeys, columns::name)>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>`
   = note: this usually means that the `Mysql` database system does not support
           this SQL syntax
   = help: the following other types implement trait `QueryFragment<DB, SP>`:
             `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action, diesel::query_builder::where_clause::WhereClause<Expr>>` implements `QueryFragment<DB>`
             `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<DB, SD>`
             `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<DB>`
             `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<Mysql, mysql::backend::MysqlOnConflictClause>`
   = note: required for `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(DuplicatedKeys, columns::name)>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>` to implement `QueryFragment<Mysql>`
   = note: 1 redundant requirement hidden
   = note: required for `InsertStatement<users::table, diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(DuplicatedKeys, columns::name)>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>>` to implement `QueryFragment<Mysql>`
   = note: required for `InsertStatement<users::table, diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(DuplicatedKeys, columns::name)>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>>` to implement `ExecuteDsl<diesel::MysqlConnection, Mysql>`
note: required by a bound in `diesel::RunQueryDsl::execute`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn execute(self, conn: &mut Conn) -> QueryResult<usize>
   |        ------- required by a bound in this associated function
...
   |         Self: methods::ExecuteDsl<Conn>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::execute`

error[E0277]: `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<SqlLiteral<_>>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>` is no valid SQL fragment for the `Mysql` backend
  --> tests/fail/mysql_on_conflict_tests.rs:62:18
   |
62 |         .execute(&mut connection);
   |          ------- ^^^^^^^^^^^^^^^ unsatisfied trait bound
   |          |
   |          required by a bound introduced by this call
   |
   = help: the trait `QueryFragment<Mysql, mysql::backend::MysqlOnConflictClause>` is not implemented for `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<SqlLiteral<_>>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>`
   = note: this usually means that the `Mysql` database system does not support
           this SQL syntax
   = help: the following other types implement trait `QueryFragment<DB, SP>`:
             `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action, diesel::query_builder::where_clause::WhereClause<Expr>>` implements `QueryFragment<DB>`
             `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<DB, SD>`
             `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<DB>`
             `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<Mysql, mysql::backend::MysqlOnConflictClause>`
   = note: required for `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<SqlLiteral<_>>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>` to implement `QueryFragment<Mysql>`
   = note: 1 redundant requirement hidden
   = note: required for `InsertStatement<users::table, diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<SqlLiteral<_>>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>>` to implement `QueryFragment<Mysql>`
   = note: required for `InsertStatement<users::table, diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<SqlLiteral<_>>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>>` to implement `ExecuteDsl<diesel::MysqlConnection, Mysql>`
note: required by a bound in `diesel::RunQueryDsl::execute`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn execute(self, conn: &mut Conn) -> QueryResult<usize>
   |        ------- required by a bound in this associated function
...
   |         Self: methods::ExecuteDsl<Conn>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::execute`

error[E0277]: `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<DuplicatedKeys>, diesel::query_builder::upsert::on_conflict_actions::DoUpdate<diesel::query_builder::update_statement::changeset::Assign<diesel::query_builder::update_statement::changeset::ColumnWrapperForUpdate<columns::name>, diesel::query_builder::upsert::on_conflict_actions::Excluded<columns::name>>, users::table>>` is no valid SQL fragment for the `Mysql` backend
  --> tests/fail/mysql_on_conflict_tests.rs:70:18
   |
70 |         .execute(&mut connection);
   |          ------- ^^^^^^^^^^^^^^^ unsatisfied trait bound
   |          |
   |          required by a bound introduced by this call
   |
   = help: the trait `QueryFragment<Mysql, mysql::backend::MysqlOnConflictClause>` is not implemented for `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<DuplicatedKeys>, diesel::query_builder::upsert::on_conflict_actions::DoUpdate<diesel::query_builder::update_statement::changeset::Assign<diesel::query_builder::update_statement::changeset::ColumnWrapperForUpdate<columns::name>, diesel::query_builder::upsert::on_conflict_actions::Excluded<columns::name>>, users::table>>`
   = note: this usually means that the `Mysql` database system does not support
           this SQL syntax
   = help: the following other types implement trait `QueryFragment<DB, SP>`:
             `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action, diesel::query_builder::where_clause::WhereClause<Expr>>` implements `QueryFragment<DB>`
             `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<DB, SD>`
             `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<DB>`
             `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<Mysql, mysql::backend::MysqlOnConflictClause>`
   = note: required for `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<DuplicatedKeys>, diesel::query_builder::upsert::on_conflict_actions::DoUpdate<diesel::query_builder::update_statement::changeset::Assign<diesel::query_builder::update_statement::changeset::ColumnWrapperForUpdate<columns::name>, diesel::query_builder::upsert::on_conflict_actions::Excluded<columns::name>>, users::table>>` to implement `QueryFragment<Mysql>`
   = note: 1 redundant requirement hidden
   = note: required for `InsertStatement<users::table, diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<DuplicatedKeys>, diesel::query_builder::upsert::on_conflict_actions::DoUpdate<diesel::query_builder::update_statement::changeset::Assign<diesel::query_builder::update_statement::changeset::ColumnWrapperForUpdate<columns::name>, diesel::query_builder::upsert::on_conflict_actions::Excluded<columns::name>>, users::table>>>` to implement `QueryFragment<Mysql>`
   = note: required for `InsertStatement<users::table, diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<DuplicatedKeys>, diesel::query_builder::upsert::on_conflict_actions::DoUpdate<diesel::query_builder::update_statement::changeset::Assign<diesel::query_builder::update_statement::changeset::ColumnWrapperForUpdate<columns::name>, diesel::query_builder::upsert::on_conflict_actions::Excluded<columns::name>>, users::table>>>` to implement `ExecuteDsl<diesel::MysqlConnection, Mysql>`
note: required by a bound in `diesel::RunQueryDsl::execute`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn execute(self, conn: &mut Conn) -> QueryResult<usize>
   |        ------- required by a bound in this associated function
...
   |         Self: methods::ExecuteDsl<Conn>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::execute`

error[E0277]: `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<DuplicatedKeys>` is no valid SQL fragment for the `Pg` backend
  --> tests/fail/mysql_on_conflict_tests.rs:79:18
   |
79 |         .execute(&mut connection);
   |          ------- ^^^^^^^^^^^^^^^ the trait `QueryFragment<Pg>` is not implemented for `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<DuplicatedKeys>`
   |          |
   |          required by a bound introduced by this call
   |
   = note: this usually means that the `Pg` database system does not support
           this SQL syntax
   = help: the trait `QueryFragment<Pg, diesel::query_builder::private::NotSpecialized>` is not implemented for `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<DuplicatedKeys>`
           but trait `QueryFragment<Mysql, mysql::backend::MysqlOnConflictClause>` is implemented for it
   = note: required for `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<DuplicatedKeys>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>` to implement `QueryFragment<Pg, pg::backend::PgOnConflictClause>`
   = note: 2 redundant requirements hidden
   = note: required for `InsertStatement<users::table, diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<DuplicatedKeys>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>>` to implement `QueryFragment<Pg>`
   = note: required for `InsertStatement<users::table, diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<DuplicatedKeys>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>>` to implement `ExecuteDsl<diesel::PgConnection, Pg>`
note: required by a bound in `diesel::RunQueryDsl::execute`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn execute(self, conn: &mut Conn) -> QueryResult<usize>
   |        ------- required by a bound in this associated function
...
   |         Self: methods::ExecuteDsl<Conn>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::execute`

error[E0277]: the trait bound `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(columns::name, DuplicatedKeys)>: diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<users::table>` is not satisfied
  --> tests/fail/mysql_on_conflict_tests.rs:83:22
   |
83 |         .on_conflict((name, dsl::DuplicatedKeys))
   |          ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ unsatisfied trait bound
   |          |
   |          required by a bound introduced by this call
   |
   = help: the trait `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<users::table>` is not implemented for `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(columns::name, DuplicatedKeys)>`
   = help: the following other types implement trait `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<Table>`:
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(T,)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<T as Column>::Table>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4, T5)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4, T5, T6)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
           and $N others
note: required by a bound in `diesel::upsert::on_conflict_extension::<impl InsertStatement<T, U, Op, Ret>>::on_conflict`
  --> $DIESEL/src/upsert/on_conflict_extension.rs
   |
   |     pub fn on_conflict<Target>(
   |            ----------- required by a bound in this associated function
...
   |         ConflictTarget<Target>: OnConflictTarget<T>,
   |                                 ^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::upsert::on_conflict_extension::<impl InsertStatement<T, U, Op, Ret>>::on_conflict`

error[E0277]: `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(columns::name, DuplicatedKeys)>` is no valid SQL fragment for the `Pg` backend
  --> tests/fail/mysql_on_conflict_tests.rs:85:18
   |
85 |         .execute(&mut connection);
   |          ------- ^^^^^^^^^^^^^^^ unsatisfied trait bound
   |          |
   |          required by a bound introduced by this call
   |
   = help: the trait `QueryFragment<Pg>` is not implemented for `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(columns::name, DuplicatedKeys)>`
   = note: this usually means that the `Pg` database system does not support
           this SQL syntax
   = help: the following other types implement trait `QueryFragment<DB, SP>`:
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(T,)>` implements `QueryFragment<DB, SP>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0)>` implements `QueryFragment<_DB, _SP>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1)>` implements `QueryFragment<_DB, _SP>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2)>` implements `QueryFragment<_DB, _SP>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3)>` implements `QueryFragment<_DB, _SP>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4)>` implements `QueryFragment<_DB, _SP>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4, T5)>` implements `QueryFragment<_DB, _SP>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4, T5, T6)>` implements `QueryFragment<_DB, _SP>`
           and $N others
   = note: required for `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(columns::name, DuplicatedKeys)>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>` to implement `QueryFragment<Pg, pg::backend::PgOnConflictClause>`
   = note: 2 redundant requirements hidden
   = note: required for `InsertStatement<users::table, diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(columns::name, DuplicatedKeys)>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>>` to implement `QueryFragment<Pg>`
   = note: required for `InsertStatement<users::table, diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(columns::name, DuplicatedKeys)>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>>` to implement `ExecuteDsl<diesel::PgConnection, Pg>`
note: required by a bound in `diesel::RunQueryDsl::execute`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn execute(self, conn: &mut Conn) -> QueryResult<usize>
   |        ------- required by a bound in this associated function
...
   |         Self: methods::ExecuteDsl<Conn>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::execute`

error[E0277]: the trait bound `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(DuplicatedKeys, columns::name)>: diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<users::table>` is not satisfied
  --> tests/fail/mysql_on_conflict_tests.rs:89:22
   |
89 |         .on_conflict((dsl::DuplicatedKeys, name))
   |          ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ unsatisfied trait bound
   |          |
   |          required by a bound introduced by this call
   |
   = help: the trait `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<users::table>` is not implemented for `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(DuplicatedKeys, columns::name)>`
   = help: the following other types implement trait `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<Table>`:
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(T,)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<T as Column>::Table>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4, T5)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4, T5, T6)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
           and $N others
note: required by a bound in `diesel::upsert::on_conflict_extension::<impl InsertStatement<T, U, Op, Ret>>::on_conflict`
  --> $DIESEL/src/upsert/on_conflict_extension.rs
   |
   |     pub fn on_conflict<Target>(
   |            ----------- required by a bound in this associated function
...
   |         ConflictTarget<Target>: OnConflictTarget<T>,
   |                                 ^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::upsert::on_conflict_extension::<impl InsertStatement<T, U, Op, Ret>>::on_conflict`

error[E0277]: `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(DuplicatedKeys, columns::name)>` is no valid SQL fragment for the `Pg` backend
  --> tests/fail/mysql_on_conflict_tests.rs:91:18
   |
91 |         .execute(&mut connection);
   |          ------- ^^^^^^^^^^^^^^^ unsatisfied trait bound
   |          |
   |          required by a bound introduced by this call
   |
   = help: the trait `QueryFragment<Pg>` is not implemented for `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(DuplicatedKeys, columns::name)>`
   = note: this usually means that the `Pg` database system does not support
           this SQL syntax
   = help: the following other types implement trait `QueryFragment<DB, SP>`:
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(T,)>` implements `QueryFragment<DB, SP>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0)>` implements `QueryFragment<_DB, _SP>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1)>` implements `QueryFragment<_DB, _SP>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2)>` implements `QueryFragment<_DB, _SP>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3)>` implements `QueryFragment<_DB, _SP>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4)>` implements `QueryFragment<_DB, _SP>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4, T5)>` implements `QueryFragment<_DB, _SP>`
             `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4, T5, T6)>` implements `QueryFragment<_DB, _SP>`
           and $N others
   = note: required for `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(DuplicatedKeys, columns::name)>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>` to implement `QueryFragment<Pg, pg::backend::PgOnConflictClause>`
   = note: 2 redundant requirements hidden
   = note: required for `InsertStatement<users::table, diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(DuplicatedKeys, columns::name)>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>>` to implement `QueryFragment<Pg>`
   = note: required for `InsertStatement<users::table, diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<diesel::query_builder::insert_statement::ValuesClause<(ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>), users::table>, diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(DuplicatedKeys, columns::name)>, diesel::query_builder::upsert::on_conflict_actions::DoNothing<users::table>>>` to implement `ExecuteDsl<diesel::PgConnection, Pg>`
note: required by a bound in `diesel::RunQueryDsl::execute`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn execute(self, conn: &mut Conn) -> QueryResult<usize>
   |        ------- required by a bound in this associated function
...
   |         Self: methods::ExecuteDsl<Conn>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::execute`
