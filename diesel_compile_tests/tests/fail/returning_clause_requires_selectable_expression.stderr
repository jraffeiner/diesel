error[E0277]: Cannot select `non_users::columns::noname` from `users::table`
  --> tests/fail/returning_clause_requires_selectable_expression.rs:27:20
   |
27 |         .returning(non_users::columns::noname);
   |          --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `non_users::columns::noname`
   |          |
   |          required by a bound introduced by this call
   |
   = note: `non_users::columns::noname` is no valid selection for `users::table`
   = help: the following other types implement trait `SelectableExpression<QS>`:
             `non_users::columns::noname` implements `SelectableExpression<JoinOn<Join, On>>`
             `non_users::columns::noname` implements `SelectableExpression<Only<non_users::table>>`
             `non_users::columns::noname` implements `SelectableExpression<SelectStatement<FromClause<From>>>`
             `non_users::columns::noname` implements `SelectableExpression<Tablesample<non_users::table, TSM>>`
             `non_users::columns::noname` implements `SelectableExpression<non_users::table>`
             `non_users::columns::noname` implements `SelectableExpression<query_source::joins::Join<Left, Right, Inner>>`
             `non_users::columns::noname` implements `SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>`
note: required by a bound in `DeleteStatement::<T, U>::returning`
  --> $DIESEL/src/query_builder/delete_statement/mod.rs
   |
   |     pub fn returning<E>(self, returns: E) -> DeleteStatement<T, U, ReturningClause<E>>
   |            --------- required by a bound in this associated function
   |     where
   |         E: SelectableExpression<T>,
   |            ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `DeleteStatement::<T, U>::returning`

error[E0277]: Cannot select `non_users::columns::noname` from `users::table`
  --> tests/fail/returning_clause_requires_selectable_expression.rs:31:20
   |
31 |         .returning(non_users::columns::noname);
   |          --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `non_users::columns::noname`
   |          |
   |          required by a bound introduced by this call
   |
   = note: `non_users::columns::noname` is no valid selection for `users::table`
   = help: the following other types implement trait `SelectableExpression<QS>`:
             `non_users::columns::noname` implements `SelectableExpression<JoinOn<Join, On>>`
             `non_users::columns::noname` implements `SelectableExpression<Only<non_users::table>>`
             `non_users::columns::noname` implements `SelectableExpression<SelectStatement<FromClause<From>>>`
             `non_users::columns::noname` implements `SelectableExpression<Tablesample<non_users::table, TSM>>`
             `non_users::columns::noname` implements `SelectableExpression<non_users::table>`
             `non_users::columns::noname` implements `SelectableExpression<query_source::joins::Join<Left, Right, Inner>>`
             `non_users::columns::noname` implements `SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>`
   = note: required for `InsertStatement<users::table, diesel::query_builder::insert_statement::ValuesClause<(DefaultableColumnInsertValue<ColumnInsertValue<users::columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>,), users::table>, diesel::query_builder::insert_statement::private::Insert, ReturningClause<non_users::columns::noname>>` to implement `Query`
note: required by a bound in `InsertStatement::<T, U, Op>::returning`
  --> $DIESEL/src/query_builder/insert_statement/mod.rs
   |
   |     pub fn returning<E>(self, returns: E) -> InsertStatement<T, U, Op, ReturningClause<E>>
   |            --------- required by a bound in this associated function
   |     where
   |         InsertStatement<T, U, Op, ReturningClause<E>>: Query,
   |                                                        ^^^^^ required by this bound in `InsertStatement::<T, U, Op>::returning`

error[E0277]: Cannot select `non_users::columns::noname` from `users::table`
  --> tests/fail/returning_clause_requires_selectable_expression.rs:35:20
   |
35 |         .returning(non_users::columns::noname);
   |          --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `non_users::columns::noname`
   |          |
   |          required by a bound introduced by this call
   |
   = note: `non_users::columns::noname` is no valid selection for `users::table`
   = help: the following other types implement trait `SelectableExpression<QS>`:
             `non_users::columns::noname` implements `SelectableExpression<JoinOn<Join, On>>`
             `non_users::columns::noname` implements `SelectableExpression<Only<non_users::table>>`
             `non_users::columns::noname` implements `SelectableExpression<SelectStatement<FromClause<From>>>`
             `non_users::columns::noname` implements `SelectableExpression<Tablesample<non_users::table, TSM>>`
             `non_users::columns::noname` implements `SelectableExpression<non_users::table>`
             `non_users::columns::noname` implements `SelectableExpression<query_source::joins::Join<Left, Right, Inner>>`
             `non_users::columns::noname` implements `SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>`
   = note: required for `UpdateStatement<users::table, diesel::query_builder::where_clause::NoWhereClause, diesel::query_builder::update_statement::changeset::Assign<diesel::query_builder::update_statement::changeset::ColumnWrapperForUpdate<users::columns::name>, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, ReturningClause<non_users::columns::noname>>` to implement `Query`
note: required by a bound in `UpdateStatement::<T, U, V>::returning`
  --> $DIESEL/src/query_builder/update_statement/mod.rs
   |
   |     pub fn returning<E>(self, returns: E) -> UpdateStatement<T, U, V, ReturningClause<E>>
   |            --------- required by a bound in this associated function
...
   |         UpdateStatement<T, U, V, ReturningClause<E>>: Query,
   |                                                       ^^^^^ required by this bound in `UpdateStatement::<T, U, V>::returning`
