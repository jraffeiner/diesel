error[E0277]: `ReturningClause<(columns::id, columns::name)>` is no valid SQL fragment for the `Sqlite` backend
  --> tests/fail/insert_statement_does_not_support_returning_methods_on_sqlite.rs:29:29
   |
29 |         .get_result::<User>(&mut connection);
   |          ----------         ^^^^^^^^^^^^^^^ the trait `QueryFragment<Sqlite, DoesNotSupportReturningClause>` is not implemented for `ReturningClause<(columns::id, columns::name)>`
   |          |
   |          required by a bound introduced by this call
   |
   = note: this usually means that the `Sqlite` database system does not support
           this SQL syntax
   = help: the following other types implement trait `QueryFragment<DB, SP>`:
             `ReturningClause<Expr>` implements `QueryFragment<DB, PgLikeReturningClause>`
             `ReturningClause<Expr>` implements `QueryFragment<DB, sqlite::backend::SqliteReturningClause>`
             `ReturningClause<Expr>` implements `QueryFragment<DB>`
   = note: required for `ReturningClause<(columns::id, columns::name)>` to implement `QueryFragment<Sqlite>`
   = note: 1 redundant requirement hidden
   = note: required for `InsertStatement<users::table, diesel::query_builder::insert_statement::ValuesClause<(DefaultableColumnInsertValue<ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>,), users::table>, diesel::query_builder::insert_statement::private::Insert, ReturningClause<(columns::id, columns::name)>>` to implement `QueryFragment<Sqlite>`
   = note: required for `InsertStatement<users::table, diesel::query_builder::insert_statement::ValuesClause<(DefaultableColumnInsertValue<ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>,), users::table>>` to implement `LoadQuery<'_, SqliteConnection, User>`
note: required by a bound in `get_result`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
   |        ---------- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`

error[E0277]: `ReturningClause<columns::name>` is no valid SQL fragment for the `Sqlite` backend
  --> tests/fail/insert_statement_does_not_support_returning_methods_on_sqlite.rs:34:31
   |
34 |         .get_result::<String>(&mut connection);
   |          ----------           ^^^^^^^^^^^^^^^ the trait `QueryFragment<Sqlite, DoesNotSupportReturningClause>` is not implemented for `ReturningClause<columns::name>`
   |          |
   |          required by a bound introduced by this call
   |
   = note: this usually means that the `Sqlite` database system does not support
           this SQL syntax
   = help: the following other types implement trait `QueryFragment<DB, SP>`:
             `ReturningClause<Expr>` implements `QueryFragment<DB, PgLikeReturningClause>`
             `ReturningClause<Expr>` implements `QueryFragment<DB, sqlite::backend::SqliteReturningClause>`
             `ReturningClause<Expr>` implements `QueryFragment<DB>`
   = note: required for `ReturningClause<columns::name>` to implement `QueryFragment<Sqlite>`
   = note: 1 redundant requirement hidden
   = note: required for `InsertStatement<users::table, diesel::query_builder::insert_statement::ValuesClause<(DefaultableColumnInsertValue<ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>,), users::table>, diesel::query_builder::insert_statement::private::Insert, ReturningClause<columns::name>>` to implement `QueryFragment<Sqlite>`
   = note: required for `InsertStatement<users::table, diesel::query_builder::insert_statement::ValuesClause<(DefaultableColumnInsertValue<ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>,), users::table>, diesel::query_builder::insert_statement::private::Insert, ReturningClause<columns::name>>` to implement `LoadQuery<'_, SqliteConnection, std::string::String>`
note: required by a bound in `get_result`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
   |        ---------- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
